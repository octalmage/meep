syntax = "proto3";
package octalmage.meep.meep;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
// this line is used by starport scaffolding # 1
import "meep/username.proto";
import "meep/thread.proto";
import "meep/post.proto";

option go_package = "github.com/octalmage/meep/x/meep/types";

// Query defines the gRPC querier service.
service Query {
    // this line is used by starport scaffolding # 2
	rpc Username(QueryGetUsernameRequest) returns (QueryGetUsernameResponse) {
		option (google.api.http).get = "/octalmage/meep/meep/username/{id}";
	}
	rpc UsernameAll(QueryAllUsernameRequest) returns (QueryAllUsernameResponse) {
		option (google.api.http).get = "/octalmage/meep/meep/username";
	}

	rpc Thread(QueryGetThreadRequest) returns (QueryGetThreadResponse) {
		option (google.api.http).get = "/octalmage/meep/meep/thread/{id}";
	}
	rpc ThreadAll(QueryAllThreadRequest) returns (QueryAllThreadResponse) {
		option (google.api.http).get = "/octalmage/meep/meep/thread";
	}

	rpc Post(QueryGetPostRequest) returns (QueryGetPostResponse) {
		option (google.api.http).get = "/octalmage/meep/meep/post/{id}";
	}
	rpc PostAll(QueryAllPostRequest) returns (QueryAllPostResponse) {
		option (google.api.http).get = "/octalmage/meep/meep/post";
	}

}

// this line is used by starport scaffolding # 3
message QueryGetUsernameRequest {
	uint64 id = 1;
}

message QueryGetUsernameResponse {
	Username Username = 1;
}

message QueryAllUsernameRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllUsernameResponse {
	repeated Username Username = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
message QueryGetThreadRequest {
	uint64 id = 1;
}

message QueryGetThreadResponse {
	Thread Thread = 1;
}

message QueryAllThreadRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllThreadResponse {
	repeated Thread Thread = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
	uint64 count = 3;
}
message QueryGetPostRequest {
	uint64 id = 1;
}

message QueryGetPostResponse {
	Post Post = 1;
}

message QueryAllPostRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPostResponse {
	repeated Post Post = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
